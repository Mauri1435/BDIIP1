CREATE TABLE Usuario (
    ID_Usuario NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Cedula VARCHAR2(20) UNIQUE NOT NULL,
    Nombre VARCHAR2(50) NOT NULL,
    Apellidos VARCHAR2(100) NOT NULL,
    Numero_Telefonico VARCHAR2(20)
);

CREATE TABLE Editorial (
    ID_Editorial NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Nombre VARCHAR2(100) UNIQUE NOT NULL,
    Activo NUMBER(1) DEFAULT 1 CHECK (Activo IN (0, 1))
);

CREATE TABLE Autor (
    ID_Autor NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Nombre VARCHAR2(50) NOT NULL,
    Apellidos VARCHAR2(100) NOT NULL,
    UNIQUE (Nombre, Apellidos)
);

CREATE TABLE Genero (
    ID_Genero NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Nombre VARCHAR2(50) UNIQUE NOT NULL,
    Descripcion VARCHAR2(255)
);

CREATE TABLE Libros (
    ID_Libro NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Titulo VARCHAR2(200) UNIQUE NOT NULL,
    ISBN VARCHAR2(20) UNIQUE NOT NULL,
    Edad_Recomendada VARCHAR2(10), --Lo cambié a VARCHAR2 para poder poner 3-5, +18, etc 
    Inventario NUMBER NOT NULL,
    ID_Editorial NUMBER NOT NULL,
    Activo NUMBER(1) DEFAULT 1 CHECK (Activo IN (0, 1)), --Para no tener que eliminar libros que ya tengan reservas
    FOREIGN KEY (ID_Editorial) REFERENCES Editorial(ID_Editorial)
);

CREATE TABLE Reservas (
    ID_Reserva NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Fecha_Reserva DATE NOT NULL,
    Fecha_Limite DATE NOT NULL,
    ID_Usuario NUMBER NOT NULL,
    Cantidad_Libros NUMBER DEFAULT 0 NOT NULL,
    Multa NUMBER DEFAULT 0 NOT NULL,
    Activo NUMBER(1) DEFAULT 1 CHECK (Activo IN (0, 1)), 
    FOREIGN KEY (ID_Usuario) REFERENCES Usuario(ID_Usuario)
);

-- Tablas intermedias 
CREATE TABLE Libro_Reserva(
    ID_Reserva NUMBER NOT NULL,
    ID_Libro NUMBER NOT NULL,
    FOREIGN KEY (ID_Reserva) REFERENCES Reservas(ID_Reserva),
    FOREIGN KEY (ID_Libro) REFERENCES Libros(ID_Libro),
    PRIMARY KEY (ID_Reserva, ID_Libro)
);

CREATE TABLE Autor_Libro(
    ID_Autor NUMBER NOT NULL,
    ID_Libro NUMBER NOT NULL,
    FOREIGN KEY (ID_Autor) REFERENCES Autor(ID_Autor),
    FOREIGN KEY (ID_Libro) REFERENCES Libros(ID_Libro),
    PRIMARY KEY (ID_Autor, ID_Libro)
);

CREATE TABLE Genero_Libro(
    ID_Genero NUMBER NOT NULL,
    ID_Libro NUMBER NOT NULL,
    FOREIGN KEY (ID_Genero) REFERENCES Genero(ID_Genero),
    FOREIGN KEY (ID_Libro) REFERENCES Libros(ID_Libro),
    PRIMARY KEY (ID_Genero, ID_Libro)
);

CREATE TABLE Bitacora_Reservas (
    ID_Bitacora NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ID_Reserva NUMBER NOT NULL,
    Fecha_Limite DATE NOT NULL,
    Fecha_Entrega TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    Multa NUMBER DEFAULT 0 NOT NULL
);

-- Package de inserts, podría combinarse en uno de modificaciones o mantenerse separado por comodidad

CREATE OR REPLACE PACKAGE pkg_inserts AS
    --Usuario
    PROCEDURE insert_usuario(
        p_cedula IN VARCHAR2,
        p_nombre IN VARCHAR2,
        p_apellidos IN VARCHAR2,
        p_numero_telefonico IN VARCHAR2 DEFAULT NULL
    );
    --Editorial
    PROCEDURE insert_editorial(
        p_nombre IN VARCHAR2
    );
    -- Autor
    PROCEDURE insert_autor(
        p_nombre IN VARCHAR2,
        p_apellidos IN VARCHAR2
    );
    -- Genero
    PROCEDURE insert_genero(
        p_nombre IN VARCHAR2,
        p_descripcion IN VARCHAR2 DEFAULT NULL
    );
    -- Libro
    PROCEDURE insert_libro(
        p_titulo IN VARCHAR2,
        p_isbn IN VARCHAR2,
        p_edad_recomendada IN VARCHAR2,
        p_inventario IN NUMBER,
        p_id_editorial IN NUMBER,
        p_autores IN VARCHAR2 DEFAULT NULL,  -- IDs de autores relacionados (ej: '1,2,3')
        p_generos IN VARCHAR2 DEFAULT NULL  -- IDs de generos relacionados (ej: '1,,2,3')
    );
    --Reserva
    PROCEDURE insert_reserva(
        p_fecha_reserva IN DATE,
        p_fecha_limite IN DATE,
        p_id_usuario IN NUMBER,
        p_libros IN VARCHAR2 DEFAULT NULL -- IDs de libros relacionados (ej: '1,2,3')
    );
    -- Autor_Libro
    PROCEDURE insert_autor_libro(
        p_id_autor IN NUMBER,
        p_id_libro IN NUMBER
    );
    -- Genero_Libro
    PROCEDURE insert_genero_libro(
        p_id_genero IN NUMBER,
        p_id_libro IN NUMBER
    );
    -- Libro_Reserva
    PROCEDURE insert_libro_reserva(
        p_id_reserva IN NUMBER,
        p_id_libro IN NUMBER
    );
END pkg_inserts;
/


CREATE OR REPLACE PACKAGE BODY pkg_inserts AS
-- USUARIO
    PROCEDURE insert_usuario(
        p_cedula IN VARCHAR2,
        p_nombre IN VARCHAR2,
        p_apellidos IN VARCHAR2,
        p_numero_telefonico IN VARCHAR2 DEFAULT NULL
    ) IS

    BEGIN
        INSERT INTO Usuario (Cedula, Nombre, Apellidos, Numero_Telefonico)
        VALUES (p_cedula, p_nombre, p_apellidos, p_numero_telefonico);
        COMMIT;

    EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
            ROLLBACK;
            DBMS_OUTPUT.PUT_LINE('Error al insertar Usuario');
            RAISE_APPLICATION_ERROR(-20001, 'Ya existe un usario con la cédula ' || p_cedula);
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error al insertar Usuario');
            ROLLBACK;
            RAISE;

    END insert_usuario;

-- EDITORIAL
    PROCEDURE insert_editorial(
        p_nombre IN VARCHAR2
    ) IS

    BEGIN
        INSERT INTO Editorial (Nombre)
        VALUES (p_nombre);
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Editorial insertada correctamente');

    EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
            ROLLBACK;
            DBMS_OUTPUT.PUT_LINE('Error al insertar Editorial');
            RAISE_APPLICATION_ERROR(-20002, 'La editorial ' || p_nombre || ' ya existe');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error al insertar Editorial');
            ROLLBACK;
            RAISE;
            
    END insert_editorial;

--AUTOR
    PROCEDURE insert_autor(
        p_nombre IN VARCHAR2,
        p_apellidos IN VARCHAR2
    ) IS
    BEGIN
        INSERT INTO Autor (Nombre, Apellidos)
        VALUES (p_nombre, p_apellidos);
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Autor insertado correctamente');
    EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
            ROLLBACK;
            DBMS_OUTPUT.PUT_LINE('Error al insertar Autor');
            RAISE_APPLICATION_ERROR(-20003, 
                'Ya existe un autor con nombre "' || p_nombre || 
                '" y apellidos "' || p_apellidos || '"');
        WHEN OTHERS THEN
            ROLLBACK;
            RAISE;
    END insert_autor;
 
-- GENERO
    PROCEDURE insert_genero(
        p_nombre IN VARCHAR2,
        p_descripcion IN VARCHAR2 DEFAULT NULL
    ) IS
    BEGIN
        INSERT INTO Genero (Nombre, Descripcion)
        VALUES (p_nombre, p_descripcion);
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Género insertado correctamente');
    EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
            DBMS_OUTPUT.PUT_LINE('Error al insertar Género');
            ROLLBACK;
            RAISE_APPLICATION_ERROR(-20004, 'El genero ' || p_nombre || ' ya existe');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error al insertar Género');
            ROLLBACK;
            RAISE;
    END insert_genero;
    
-- LIBRO            
    PROCEDURE insert_libro(
        p_titulo IN VARCHAR2,
        p_isbn IN VARCHAR2,
        p_edad_recomendada IN VARCHAR2,
        p_inventario IN NUMBER,
        p_id_editorial IN NUMBER,
        p_autores IN VARCHAR2 DEFAULT NULL, -- IDs de autores relacionados (ej: '1,2,3')
        p_generos IN VARCHAR2 DEFAULT NULL -- IDs de generos relacionados (ej: '1,2,3')
    ) IS

        v_id_libro NUMBER;
        v_editorial_existe NUMBER;
        v_autor_existe NUMBER;
        v_genero_existe NUMBER;
        
        e_editorial_no_existe EXCEPTION;
        PRAGMA EXCEPTION_INIT(e_editorial_no_existe, -20010);

        e_autor_no_existe EXCEPTION;
        PRAGMA EXCEPTION_INIT(e_autor_no_existe, -20011);

        e_genero_no_existe EXCEPTION;
        PRAGMA EXCEPTION_INIT(e_genero_no_existe, -20012);
        
    BEGIN
        -- Validar EDITORIAL existe
        SELECT COUNT(*) INTO v_editorial_existe
        FROM Editorial
        WHERE ID_Editorial = p_id_editorial;
        
        IF v_editorial_existe = 0 THEN
            RAISE e_editorial_no_existe;
        END IF;
        
        -- Validar AUTORES existen 
        IF p_autores IS NOT NULL THEN
            FOR r IN (
                SELECT regexp_substr(p_autores, '[^,]+', 1, LEVEL) AS id_autor
                FROM dual
                CONNECT BY regexp_substr(p_autores, '[^,]+', 1, LEVEL) IS NOT NULL
            ) LOOP
                SELECT COUNT(*) INTO v_autor_existe
                FROM Autor
                WHERE ID_Autor = TO_NUMBER(r.id_autor);
                
                IF v_autor_existe = 0 THEN
                    RAISE_APPLICATION_ERROR(-20011, 'Error: No existe el autor con ID ' || r.id_autor);
                END IF;
            END LOOP;
        END IF;
        
        -- Validar GÉNEROS existen 
        IF p_generos IS NOT NULL THEN
            FOR r IN (
                SELECT regexp_substr(p_generos, '[^,]+', 1, LEVEL) AS id_genero
                FROM dual
                CONNECT BY regexp_substr(p_generos, '[^,]+', 1, LEVEL) IS NOT NULL
            ) LOOP
                SELECT COUNT(*) INTO v_genero_existe
                FROM Genero
                WHERE ID_Genero = TO_NUMBER(r.id_genero);
                
                IF v_genero_existe = 0 THEN
                    RAISE_APPLICATION_ERROR(-20012, 'Error: No existe el género con ID ' || r.id_genero);
                END IF;
            END LOOP;
        END IF;
        
        -- Insertar el libro 
        INSERT INTO Libros (Titulo, ISBN, Edad_Recomendada, Inventario, ID_Editorial)
        VALUES (p_titulo, p_isbn, p_edad_recomendada, p_inventario, p_id_editorial)
        RETURNING ID_Libro INTO v_id_libro;
        
        -- Insertar relaciones con autores
        IF p_autores IS NOT NULL THEN
            FOR r IN (
                SELECT regexp_substr(p_autores, '[^,]+', 1, LEVEL) AS id_autor
                FROM dual
                CONNECT BY regexp_substr(p_autores, '[^,]+', 1, LEVEL) IS NOT NULL
            ) LOOP
                INSERT INTO Autor_Libro (ID_Autor, ID_Libro)
                VALUES (TO_NUMBER(r.id_autor), v_id_libro);
            END LOOP;
        END IF;
        
        -- Insertar relaciones con géneros
        IF p_generos IS NOT NULL THEN
            FOR r IN (
                SELECT regexp_substr(p_generos, '[^,]+', 1, LEVEL) AS id_genero
                FROM dual
                CONNECT BY regexp_substr(p_generos, '[^,]+', 1, LEVEL) IS NOT NULL
            ) LOOP
                INSERT INTO Genero_Libro (ID_Genero, ID_Libro)
                VALUES (TO_NUMBER(r.id_genero), v_id_libro);
            END LOOP;
        END IF;
        
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Libro insertado correctamente con ID: ' || v_id_libro);
        
        EXCEPTION
            WHEN DUP_VAL_ON_INDEX THEN
                ROLLBACK;
                IF SQLERRM LIKE '%TITULO%' THEN
                    RAISE_APPLICATION_ERROR(-20005, 'Error: Ya existe un libro con el título "' || p_titulo || '"');
                ELSIF SQLERRM LIKE '%ISBN%' THEN
                    RAISE_APPLICATION_ERROR(-20006, 'Error: Ya existe un libro con el ISBN "' || p_isbn || '"');
                ELSE
                    RAISE_APPLICATION_ERROR(-20007, 'Error de duplicado: ' || SQLERRM);
                END IF;
                
            WHEN e_editorial_no_existe THEN
                ROLLBACK;
                RAISE_APPLICATION_ERROR(-20010, 'Error: No existe la editorial con ID ' || p_id_editorial);
                
            WHEN OTHERS THEN
                ROLLBACK;
                RAISE;
    END insert_libro;

--RESERVA
    PROCEDURE insert_reserva(
        p_fecha_reserva IN DATE,
        p_fecha_limite IN DATE,
        p_id_usuario IN NUMBER,
        p_libros IN VARCHAR2 DEFAULT NULL
    ) IS
        v_id_reserva NUMBER;
        v_usuario_existe NUMBER;
        v_libro_existe NUMBER;
        v_id_libro_invalido VARCHAR2(100);
        v_libro_activo NUMBER;
        
        e_usuario_no_existe EXCEPTION;
        PRAGMA EXCEPTION_INIT(e_usuario_no_existe, -20020);
        
        e_libro_no_existe EXCEPTION;
        PRAGMA EXCEPTION_INIT(e_libro_no_existe, -20021);
        
        e_libro_inactivo EXCEPTION;
        PRAGMA EXCEPTION_INIT(e_libro_inactivo, -20022);
        
        e_reserva_activa EXCEPTION;
        PRAGMA EXCEPTION_INIT(e_reserva_activa, -20024);
    BEGIN
        -- Validar usuario
        BEGIN
            -- Verificar si ya tiene reserva activa
            SELECT COUNT(*)
            INTO v_usuario_existe 
            FROM Reservas
            WHERE ID_Usuario = p_id_usuario
            AND Activo = 1;
            
            IF v_usuario_existe > 0 THEN
                RAISE e_reserva_activa;
            END IF;

        EXCEPTION
            WHEN OTHERS THEN
                RAISE;
        END;
        
        -- Validar libros 
        IF p_libros IS NOT NULL THEN
            FOR r IN (
                SELECT regexp_substr(p_libros, '[^,]+', 1, LEVEL) AS id_libro
                FROM dual
                CONNECT BY regexp_substr(p_libros, '[^,]+', 1, LEVEL) IS NOT NULL
            ) LOOP
                v_id_libro_invalido := r.id_libro; 
                
                BEGIN
                    SELECT Activo INTO v_libro_activo
                    FROM Libros
                    WHERE ID_Libro = TO_NUMBER(r.id_libro);
                    
                    IF v_libro_activo = 0 THEN
                        RAISE e_libro_inactivo;
                    END IF;
                    
                EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                        RAISE e_libro_no_existe;
                END;
            END LOOP;
        END IF;
        
        -- Insertar reserva 
        INSERT INTO Reservas (Fecha_Reserva, Fecha_Limite, ID_Usuario)
        VALUES (p_fecha_reserva, p_fecha_limite, p_id_usuario)
        RETURNING ID_Reserva INTO v_id_reserva;
        
        -- Insertar relaciones con libros 
        IF p_libros IS NOT NULL THEN
            FOR r IN (
                SELECT regexp_substr(p_libros, '[^,]+', 1, LEVEL) AS id_libro
                FROM dual
                CONNECT BY regexp_substr(p_libros, '[^,]+', 1, LEVEL) IS NOT NULL
            ) LOOP
                BEGIN
                    INSERT INTO Libro_Reserva (ID_Reserva, ID_Libro)
                    VALUES (v_id_reserva, TO_NUMBER(r.id_libro));
                EXCEPTION
                    WHEN OTHERS THEN
                        DBMS_OUTPUT.PUT_LINE('Error al agregar libro con id: ' || r.id_libro || SQLERRM);
                END;
            END LOOP;
        END IF;
        
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Reserva creada correctamente con ID: ' || v_id_reserva);
        
    EXCEPTION
        WHEN e_usuario_no_existe THEN
            ROLLBACK;
            RAISE_APPLICATION_ERROR(-20020, 'Error: No existe el usuario con ID ' || p_id_usuario);
            
        WHEN e_libro_no_existe THEN
            ROLLBACK;
            RAISE_APPLICATION_ERROR(-20021, 'Error: No existe el libro con ID ' || v_id_libro_invalido);
            
        WHEN e_libro_inactivo THEN
            ROLLBACK;
            RAISE_APPLICATION_ERROR(-20022, 'Error: El libro con ID ' || v_id_libro_invalido || ' no está activo');
            
        WHEN e_reserva_activa THEN
            ROLLBACK;
            RAISE_APPLICATION_ERROR(-20024, 'Error: El usuario ya tiene una reserva activa');
            
        WHEN OTHERS THEN
            ROLLBACK;
            IF SQLCODE = -20101 THEN 
                RAISE;  
            ELSIF SQLCODE = -20102 THEN 
                RAISE;
            ELSE
                RAISE_APPLICATION_ERROR(-20000, 'Error inesperado al crear reserva: ' || SQLERRM);
            END IF;
    END insert_reserva;

-- AUTOR_LIBRO
    PROCEDURE insert_autor_libro(
        p_id_autor IN NUMBER,
        p_id_libro IN NUMBER
    ) IS
        v_autor_existe NUMBER;
        v_libro_existe NUMBER;
    BEGIN
        -- Validar AUTOR existe
        SELECT COUNT(*) INTO v_autor_existe
        FROM Autor
        WHERE ID_Autor = p_id_autor;
        
        IF v_autor_existe = 0 THEN
            RAISE_APPLICATION_ERROR(-20030, 'Error: No existe el autor con ID ' || p_id_autor);
        END IF;
        
        -- Validar LIBRO existe
        SELECT COUNT(*) INTO v_libro_existe
        FROM Libros
        WHERE ID_Libro = p_id_libro;
        
        IF v_libro_existe = 0 THEN
            RAISE_APPLICATION_ERROR(-20031, 'Error: No existe el libro con ID ' || p_id_libro);
        END IF;
        
        -- Insertar relación
        INSERT INTO Autor_Libro (ID_Autor, ID_Libro)
        VALUES (p_id_autor, p_id_libro);
        
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Relación autor-libro insertada correctamente');
        
    EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
            ROLLBACK;
            RAISE_APPLICATION_ERROR(-20032, 'Error: Relación autor-libro ya existe');
        WHEN OTHERS THEN
            ROLLBACK;
            RAISE;
    END insert_autor_libro;
    
-- GENERO_LIBRO
    PROCEDURE insert_genero_libro(
        p_id_genero IN NUMBER,
        p_id_libro IN NUMBER
    ) IS
        v_genero_existe NUMBER;
        v_libro_existe NUMBER;
    BEGIN
        -- Validar GENERO existe
        SELECT COUNT(*) INTO v_genero_existe
        FROM Genero
        WHERE ID_Genero = p_id_genero;
        
        IF v_genero_existe = 0 THEN
            RAISE_APPLICATION_ERROR(-20033, 'Error: No existe el género con ID ' || p_id_genero);
        END IF;
        
        -- Validar LIBRO existe
        SELECT COUNT(*) INTO v_libro_existe
        FROM Libros
        WHERE ID_Libro = p_id_libro;
        
        IF v_libro_existe = 0 THEN
            RAISE_APPLICATION_ERROR(-20034, 'Error: No existe el libro con ID ' || p_id_libro);
        END IF;
        
        -- Insertar relación
        INSERT INTO Genero_Libro (ID_Genero, ID_Libro)
        VALUES (p_id_genero, p_id_libro);
        
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Relación género-libro insertada correctamente');
        
    EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
            ROLLBACK;
            RAISE_APPLICATION_ERROR(-20035, 'Error: Relación género-libro ya existe');
        WHEN OTHERS THEN
            ROLLBACK;
            RAISE;
    END insert_genero_libro;
    
-- LIBRO_RESERVA
    PROCEDURE insert_libro_reserva(
        p_id_reserva IN NUMBER,
        p_id_libro IN NUMBER
    ) IS
        v_reserva_existe NUMBER;
        v_libro_existe NUMBER;
        v_inventario_actual NUMBER;
        v_titulo VARCHAR2(200);
    BEGIN
        -- Validar RESERVA existe
        SELECT COUNT(*) INTO v_reserva_existe
        FROM Reservas
        WHERE ID_Reserva = p_id_reserva;
        
        IF v_reserva_existe = 0 THEN
            RAISE_APPLICATION_ERROR(-20036, 'Error: No existe la reserva con ID ' || p_id_reserva);
        END IF;
        
        -- Validar LIBRO existe
        SELECT Inventario, Titulo INTO v_inventario_actual, v_titulo
        FROM Libros
        WHERE ID_Libro = p_id_libro;
        
        -- Insertar relación 
        INSERT INTO Libro_Reserva (ID_Reserva, ID_Libro)
        VALUES (p_id_reserva, p_id_libro);
        
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Libro añadido a la reserva correctamente');
        
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            ROLLBACK;
            RAISE_APPLICATION_ERROR(-20037, 'Error: No existe el libro con ID ' || p_id_libro);
        WHEN DUP_VAL_ON_INDEX THEN
            ROLLBACK;
            RAISE_APPLICATION_ERROR(-20038, 'Error: El libro indicado ya está en la reserva');
        WHEN OTHERS THEN
            ROLLBACK;
            RAISE;
    END insert_libro_reserva;
    
END pkg_inserts;
/


--Package de operaciones
CREATE OR REPLACE PACKAGE pkg_operations AS
    PROCEDURE determinar_multa(
        p_id_reserva IN NUMBER
    );
    PROCEDURE finalizar_reserva(
        p_id_reserva IN NUMBER
    );
END pkg_operations;
/

CREATE OR REPLACE PACKAGE BODY pkg_operations AS
-- Determinar Multa    
    PROCEDURE determinar_multa(
        p_id_reserva IN NUMBER
    ) IS
        v_id_reserva NUMBER;
        v_fecha_limite DATE;
        v_cantidad_libros NUMBER;
        v_dias_retraso NUMBER;
        v_multa_calculada NUMBER;
    BEGIN
        
        -- Obtener datos de reserva 
        SELECT ID_Reserva, Fecha_Limite, Cantidad_Libros
        INTO v_id_reserva, v_fecha_limite, v_cantidad_libros
        FROM Reservas
        WHERE ID_Reserva = p_id_reserva
        AND Activo = 1;
        
        -- Verificar fecha limite
        IF v_fecha_limite >= SYSDATE THEN
            DBMS_OUTPUT.PUT_LINE('La reserva se encuentra dentro de la fecha límite para entrega.');
            RETURN; 
        END IF;
        
        -- Calcular días de retraso y multa
        v_dias_retraso := TRUNC(SYSDATE) - TRUNC(v_fecha_limite);
        v_multa_calculada := 500 * v_cantidad_libros * v_dias_retraso;
        
        -- Actualizar de la reserva
        UPDATE Reservas
        SET Multa = v_multa_calculada
        WHERE ID_Reserva = p_id_reserva;
        
        COMMIT;
        
        DBMS_OUTPUT.PUT_LINE('Reserva ID ' || v_id_reserva || ': ' || 
                            v_dias_retraso || ' días de retraso.');
        DBMS_OUTPUT.PUT_LINE('Multa calculada: ' || v_multa_calculada || 
                            '.');
        
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Error: no se encontraron datos de la reserva activa');
            ROLLBACK;
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error inesperado: ' || SQLERRM);
            ROLLBACK;
            RAISE;
    END determinar_multa;
-- Finalizar Reserva
    PROCEDURE finalizar_reserva(
            p_id_reserva IN NUMBER
        ) IS
            v_reserva_existe NUMBER;
            v_reserva_activa NUMBER;

        BEGIN
            -- Verificar reserva existe
            SELECT COUNT(*) INTO v_reserva_existe
            FROM Reservas
            WHERE ID_Reserva = p_id_reserva;
            
            IF v_reserva_existe = 0 THEN
                RAISE_APPLICATION_ERROR(-20080, 'No existe la reserva con ID ' || p_id_reserva);
            END IF;
            
            -- Verificar reserva está activa
            SELECT COUNT(*) INTO v_reserva_activa
            FROM Reservas
            WHERE ID_Reserva = p_id_reserva
            AND Activo = 1;
            
            IF v_reserva_activa = 0 THEN
                RAISE_APPLICATION_ERROR(-20081, 'La reserva con ID ' || p_id_reserva || ' ya está inactiva');
            END IF;
            
            -- Devolver libros al inventario 
            FOR libro_rec IN (
                SELECT lr.ID_Libro 
                FROM Libro_Reserva lr
                WHERE lr.ID_Reserva = p_id_reserva
            ) LOOP
                UPDATE Libros
                SET Inventario = Inventario + 1
                WHERE ID_Libro = libro_rec.ID_Libro;
            END LOOP;

            -- Marcar reserva como inactiva
            UPDATE Reservas
            SET Activo = 0
            WHERE ID_Reserva = p_id_reserva;
            
            COMMIT;
            
            DBMS_OUTPUT.PUT_LINE('Reserva ID ' || p_id_reserva || ' finalizada, libros devueltos al inventario.');
            
        EXCEPTION
            WHEN OTHERS THEN
                ROLLBACK;
                DBMS_OUTPUT.PUT_LINE('Error al finalizar reserva: ' || SQLERRM);
                RAISE;
        END finalizar_reserva;
END pkg_operations;
/


CREATE OR REPLACE PACKAGE pkg_deletes AS
    -- Usuario
    PROCEDURE delete_usuario(
        p_id_usuario IN NUMBER
    );
    -- Editorial
    PROCEDURE delete_editorial(
        p_id_editorial IN NUMBER
    );
    -- Autor
    PROCEDURE delete_autor(
        p_id_autor IN NUMBER
    );
    -- Género
    PROCEDURE delete_genero(
        p_id_genero IN NUMBER
    );
    -- Libro
    PROCEDURE delete_libro(
        p_id_libro IN NUMBER
    );
    -- Reserva
    PROCEDURE delete_reserva(
        p_id_reserva IN NUMBER
    );
    -- Autor_Libro
    PROCEDURE delete_autor_libro(
        p_id_autor IN NUMBER,
        p_id_libro IN NUMBER
    );
    -- Genero_Libro
    PROCEDURE delete_genero_libro(
        p_id_genero IN NUMBER,
        p_id_libro IN NUMBER
    );
    -- Libro_Reserva
    PROCEDURE delete_libro_reserva(
        p_id_reserva IN NUMBER,
        p_id_libro IN NUMBER
    );
END pkg_deletes;
/

CREATE OR REPLACE PACKAGE BODY pkg_deletes AS
-- USUARIO 
    PROCEDURE delete_usuario(
        p_id_usuario IN NUMBER
    ) IS
        v_tiene_reservas NUMBER;
    BEGIN
        -- Verificar si el usuario tiene reservas activas
        SELECT COUNT(*) INTO v_tiene_reservas
        FROM Reservas
        WHERE ID_Usuario = p_id_usuario;
        
        IF v_tiene_reservas > 0 THEN
            RAISE_APPLICATION_ERROR(-20050, 'No se puede eliminar el usuario porque tiene reservas activas');
        END IF;
        
        -- Eliminar usuario
        DELETE FROM Usuario
        WHERE ID_Usuario = p_id_usuario;
        
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Usuario eliminado correctamente');
        
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20051, 'No existe el usuario con ID ' || p_id_usuario);
        WHEN OTHERS THEN
            ROLLBACK;
            RAISE;
    END delete_usuario;
    
-- EDITORIAL 
    PROCEDURE delete_editorial(
        p_id_editorial IN NUMBER
    ) IS
        v_tiene_libros NUMBER;
        v_editorial_existe NUMBER;
    BEGIN
        --Verificar editorial existe
        SELECT COUNT(*) INTO v_editorial_existe
        FROM Editorial
        WHERE ID_Editorial = p_id_editorial;
        
        IF v_editorial_existe = 0 THEN
            RAISE_APPLICATION_ERROR(-20053, 'No existe la editorial con ID ' || p_id_editorial);
        END IF;

        --Verificar si tiene libros
        SELECT COUNT(*) INTO v_tiene_libros
        FROM Libros
        WHERE ID_Editorial = p_id_editorial;
        
        IF v_tiene_libros > 0 THEN
            -- Marcar editorial como inactiva
            UPDATE Editorial
                SET Activo = 0
                WHERE ID_Editorial = p_id_editorial;

            -- Marcar libros relacionados como inactivos
            FOR r IN (SELECT ID_Libro FROM Libros WHERE ID_Editorial = p_id_editorial) 
            LOOP
                UPDATE Libros
                SET Activo = 0
                WHERE ID_Libro = r.ID_Libro;
            END LOOP;
 
            DBMS_OUTPUT.PUT_LINE('Editorial cuenta con libros asociados, marcada como inactiva junto con sus libros asociados.');

        ELSE
            -- Eliminar Editorial
            DELETE FROM Editorial
            WHERE ID_Editorial = p_id_editorial;
            DBMS_OUTPUT.PUT_LINE('Editorial y eliminada correctamente');
        END IF;
        COMMIT;

    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            RAISE;
    END delete_editorial;
    
-- AUTOR 
    PROCEDURE delete_autor(
        p_id_autor IN NUMBER
    ) IS
    BEGIN
        -- Eliminar relaciones con libros
        DELETE FROM Autor_Libro
        WHERE ID_Autor = p_id_autor;
        
        -- Eliminar el autor
        DELETE FROM Autor
        WHERE ID_Autor = p_id_autor;
        
        IF SQL%ROWCOUNT = 0 THEN
            RAISE_APPLICATION_ERROR(-20055, 'No existe el autor con ID ' || p_id_autor);
        END IF;
        
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Autor eliminado correctamente');
        
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            RAISE;
    END delete_autor;
    
-- GENERO
    PROCEDURE delete_genero(
        p_id_genero IN NUMBER
    ) IS
    BEGIN
        -- Eliminar relaciones con libros
        DELETE FROM Genero_Libro
        WHERE ID_Genero = p_id_genero;
        
        -- Eliminar género
        DELETE FROM Genero
        WHERE ID_Genero = p_id_genero;
        
        IF SQL%ROWCOUNT = 0 THEN
            RAISE_APPLICATION_ERROR(-20057, 'No existe el género con ID ' || p_id_genero);
        END IF;
        
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Género eliminados correctamente');
        
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            RAISE;
    END delete_genero;
    
-- LIBRO 
    PROCEDURE delete_libro(
        p_id_libro IN NUMBER
    ) IS
        v_libro_existe NUMBER;
        v_en_reservas_activas NUMBER;
    BEGIN
        -- Verificar libro existe
        SELECT COUNT(*) INTO v_libro_existe
        FROM Libros
        WHERE ID_Libro = p_id_libro;
        
        IF v_libro_existe = 0 THEN
            RAISE_APPLICATION_ERROR(-20053, 'No existe el libro con ID ' || p_id_libro);
        END IF;

        -- Verificar si el libro está en reservas activas
        SELECT COUNT(*) INTO v_en_reservas_activas
        FROM Libro_Reserva lr
        JOIN Reservas r ON lr.ID_Reserva = r.ID_Reserva
        WHERE lr.ID_Libro = p_id_libro
        AND r.Activo = 1; 
        
        IF v_en_reservas_activas > 0 THEN
            UPDATE Libros
            SET Activo = 0
            WHERE ID_Libro = p_id_libro;

            DBMS_OUTPUT.PUT_LINE('Libro es parte de reservas activas, marcado como inactivo.');

        ELSE
            -- Eliminar relaciones del libro 
            DELETE FROM Genero_Libro WHERE ID_Libro = p_id_libro;
            DELETE FROM Autor_Libro WHERE ID_Libro = p_id_libro;
            DELETE FROM Libro_Reserva WHERE ID_Libro = p_id_libro;

            -- Eliminar libro
            DELETE FROM Libros WHERE ID_Libro = p_id_libro;

            DBMS_OUTPUT.PUT_LINE('Libro y todas sus relaciones eliminados correctamente');
        
        END IF;
        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            RAISE;
    END delete_libro;
    
-- RESERVA
    PROCEDURE delete_reserva(
        p_id_reserva IN NUMBER
    ) IS
        v_reserva_existe NUMBER;
    BEGIN
        -- Verificar si la reserva existe
        SELECT COUNT(*) INTO v_reserva_existe
        FROM Reservas
        WHERE ID_Reserva = p_id_reserva;
        
        IF v_reserva_existe = 0 THEN
            RAISE_APPLICATION_ERROR(-20066, 'No existe la reserva con ID ' || p_id_reserva);
        END IF;

        -- Eliminar relaciones con libros
        DELETE FROM Libro_Reserva WHERE ID_Reserva = p_id_reserva;
        
        -- Eliminar reserva
        DELETE FROM Reservas WHERE ID_Reserva = p_id_reserva;
        
        IF SQL%ROWCOUNT = 0 THEN
            RAISE_APPLICATION_ERROR(-20060, 'No existe la reserva con ID ' || p_id_reserva);
        END IF;
        
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Reserva y sus libros asociados eliminados correctamente');
        
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            RAISE;
    END delete_reserva;
    
-- AUTOR_LIBRO
    PROCEDURE delete_autor_libro(
        p_id_autor IN NUMBER,
        p_id_libro IN NUMBER
    ) IS
    BEGIN
        DELETE FROM Autor_Libro
        WHERE ID_Autor = p_id_autor
        AND ID_Libro = p_id_libro;
        
        IF SQL%ROWCOUNT = 0 THEN
            RAISE_APPLICATION_ERROR(-20061, 'No existe la relación autor-libro indicada');
        END IF;
        
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Relación autor-libro eliminada correctamente');
        
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            RAISE;
    END delete_autor_libro;
    
-- GENERO_LIBRO
    PROCEDURE delete_genero_libro(
        p_id_genero IN NUMBER,
        p_id_libro IN NUMBER
    ) IS
    BEGIN
        DELETE FROM Genero_Libro
        WHERE ID_Genero = p_id_genero
        AND ID_Libro = p_id_libro;
        
        IF SQL%ROWCOUNT = 0 THEN
            RAISE_APPLICATION_ERROR(-20062, 'No existe la relación género-libro indicada');
        END IF;
        
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Relación género-libro eliminada correctamente');
        
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            RAISE;
    END delete_genero_libro;
    
-- LIBRO_RESERVA
    PROCEDURE delete_libro_reserva(
        p_id_reserva IN NUMBER,
        p_id_libro IN NUMBER
    ) IS
        v_reserva_existe NUMBER;
        v_reserva_inactiva NUMBER;
        v_fecha_reserva DATE;

    BEGIN
        -- Verificar si la reserva existe
        SELECT COUNT(*) INTO v_reserva_existe
        FROM Reservas
        WHERE ID_Reserva = p_id_reserva;
        
        IF v_reserva_existe = 0 THEN
            RAISE_APPLICATION_ERROR(-20066, 'No existe la reserva con ID ' || p_id_reserva);
        END IF;

        --Borrar relación libro reserva
        DELETE FROM Libro_Reserva
        WHERE ID_Reserva = p_id_reserva
        AND ID_Libro = p_id_libro; 

        IF SQL%ROWCOUNT = 0 THEN
            RAISE_APPLICATION_ERROR(-20063, 'No existe la relación libro-reserva indicada');
        END IF;

        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Libro eliminado de la reserva correctamente');
        
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            ROLLBACK;
            RAISE_APPLICATION_ERROR(-20069, 'Error al obtener datos de la reserva');
        WHEN OTHERS THEN
            ROLLBACK;
            RAISE;
    END delete_libro_reserva;
    
END pkg_deletes;
/

--Trigger para manejar inventario al añadir o eliminar libros de a reserva

CREATE OR REPLACE TRIGGER t_actualizar_inventario_y_cantidad_reserva
    BEFORE INSERT OR DELETE
    ON Libro_Reserva
    FOR EACH ROW

    DECLARE
        v_inventario_actual INTEGER;
        v_titulo VARCHAR(100);
        v_activo NUMBER;
        v_reserva_activa NUMBER;
    BEGIN
        IF inserting THEN

            --Verificar libro activo
            SELECT Activo INTO v_activo
            FROM Libros
            WHERE ID_Libro = :NEW.ID_Libro;
            
            IF v_activo = 0 THEN
                RAISE_APPLICATION_ERROR(-20102, 'Error: El libro no está disponible para reserva');
            END IF;
            
            --Verificar reserva activa
            SELECT Activo INTO v_reserva_activa
            FROM Reservas
            WHERE ID_Reserva = :NEW.ID_Reserva;

            IF v_reserva_activa = 0 THEN
                RAISE_APPLICATION_ERROR(-20103, 'Error: No se puede agregar libros a una reserva inactiva');
            END IF;
            
            -- Verificar inventario
            SELECT Inventario, Titulo INTO v_inventario_actual, v_titulo
            FROM Libros
            WHERE ID_Libro = :NEW.ID_Libro;

            IF v_inventario_actual <= 0 THEN
                RAISE_APPLICATION_ERROR(-20101, 'Error: No se cuenta con inventario del título ' || v_titulo);
            ELSE
                -- Actualizar inventario
                UPDATE Libros
                SET Inventario = Inventario - 1
                WHERE ID_Libro = :NEW.ID_Libro;
                
                -- Actualizar cantidad de libros en la reserva
                UPDATE Reservas
                SET Cantidad_Libros = Cantidad_Libros + 1
                WHERE ID_Reserva = :NEW.ID_Reserva;
            END IF;

        ELSE
            SELECT Activo INTO v_reserva_activa
            FROM Reservas
            WHERE ID_Reserva = :OLD.ID_Reserva;
            
            IF v_reserva_activa = 1 THEN
                -- Actualizar inventario 
                UPDATE Libros
                SET Inventario = Inventario + 1
                WHERE ID_Libro = :OLD.ID_Libro;
                
                -- Actualizar cantidad de libros en la reserva
                UPDATE Reservas
                SET Cantidad_Libros = Cantidad_Libros - 1 
                WHERE ID_Reserva = :OLD.ID_Reserva;
            END IF;
        END IF;
    EXCEPTION 
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20002, 'Error 20002: Error al buscar el libro con el ID ' || :NEW.ID_Libro);
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20000, 'Error 20000: Error inesperado - ' || SQLERRM);    
END;
/

CREATE OR REPLACE TRIGGER tr_auditoria_reservas
    AFTER UPDATE ON Reservas
    FOR EACH ROW
    BEGIN
        -- Añadir reserva a bitácora cuando se desactiva
        IF :OLD.Activo = 1 AND :NEW.Activo = 0 THEN
            BEGIN
                -- Calcular multa si corresponde
                pkg_operations.determinar_multa(:NEW.ID_Reserva);
                
                -- Registrar en bitácora
                INSERT INTO Bitacora_Reservas (ID_Reserva, Fecha_Limite, Multa)
                VALUES (:NEW.ID_Reserva, :NEW.Fecha_Limite, :NEW.Multa);
                
                EXCEPTION
                    WHEN OTHERS THEN
                        DBMS_OUTPUT.PUT_LINE('Error en trigger tr_auditoria_reservas: ' || SQLERRM);
            END;
        END IF;
    END;
/


CREATE OR REPLACE PACKAGE pkg_datos_default AS
    PROCEDURE insert_datos_default;
    PROCEDURE limpiar_datos_default;
END pkg_datos_default;
/

CREATE OR REPLACE PACKAGE BODY pkg_datos_default AS
--Inserts de datos
    PROCEDURE insert_datos_default IS
    BEGIN

    -- Insertar usuarios
    pkg_inserts.insert_usuario('100000001', 'Juan', 'Álvarez', '8888-9999');
    pkg_inserts.insert_usuario('200000002', 'María', 'Gómez', '8888-8888');
    pkg_inserts.insert_usuario('300000003', 'Carlos', 'López', '8888-7777');
    pkg_inserts.insert_usuario('400000004', 'Valentina', 'Domínguez', '8888-6666');
    pkg_inserts.insert_usuario('500000005', 'Julián', 'Fernández', '8888-5555');
    pkg_inserts.insert_usuario('600000006', 'Isabella', 'Rodríguez', '8888-4444');
    pkg_inserts.insert_usuario('700000007', 'Sebastián', 'González', '8888-3333');
    pkg_inserts.insert_usuario('800000008', 'Emma', 'Vázquez', '8888-2222');
    pkg_inserts.insert_usuario('900000009', 'Santiago', 'Sánchez', '8888-1111');
    pkg_inserts.insert_usuario('100000011', 'Abigail', 'Hernández', '8888-0000');
    pkg_inserts.insert_usuario('110000012', 'Daniel', 'Martínez', '7777-9999');
    pkg_inserts.insert_usuario('120000013', 'Camila', 'Gutiérrez', '7777-8888');
    pkg_inserts.insert_usuario('130000014', 'Alejandro', 'Díaz', '7777-7777');
    pkg_inserts.insert_usuario('140000015', 'Valeria', 'Herrera', '7777-6666');
    pkg_inserts.insert_usuario('150000016', 'Diego', 'Jiménez', '7777-5555');
    pkg_inserts.insert_usuario('160000017', 'Renata', 'Moreno', '7777-4444');
    pkg_inserts.insert_usuario('170000018', 'Andrés', 'Pérez', '7777-3333');
    pkg_inserts.insert_usuario('180000019', 'Mariana', 'Castro', '7777-2222');
    pkg_inserts.insert_usuario('190000020', 'Javier', 'Romero', '7777-1111');
    pkg_inserts.insert_usuario('200000021', 'Fernanda', 'Suárez', '7777-0000');

    -- Insertar editoriales
    pkg_inserts.insert_editorial('Editorial Impedimenta');
    pkg_inserts.insert_editorial('Editorial Norma');
    pkg_inserts.insert_editorial('Editorial Alma');
    pkg_inserts.insert_editorial('Editorial Debolsillo');
    pkg_inserts.insert_editorial('Editorial Penguin');
    pkg_inserts.insert_editorial('Editorial Tor');
    pkg_inserts.insert_editorial('Editorial Alianza');
    pkg_inserts.insert_editorial('Editorial Satori');
    pkg_inserts.insert_editorial('Editorial Acantilado');
    pkg_inserts.insert_editorial('Editorial Everymans Library');
    pkg_inserts.insert_editorial('Editorial Debate');
    
    
    -- Insertar autores
    pkg_inserts.insert_autor('Brandon', 'Sanderson');
    pkg_inserts.insert_autor('Alejandro', 'Dumas');
    pkg_inserts.insert_autor('Frank', 'Herbert');
    pkg_inserts.insert_autor('Agatha', 'Christie');
    pkg_inserts.insert_autor('J.R.R.', 'Tolkien');
    pkg_inserts.insert_autor('Jane', 'Austen');
    pkg_inserts.insert_autor('James', 'Clear');
    pkg_inserts.insert_autor('Mary', 'Shelley');
    pkg_inserts.insert_autor('Eiichiro', 'Oda');
    pkg_inserts.insert_autor('Friederich', 'Nietzche');
    pkg_inserts.insert_autor('Michio', 'Kaku');
    pkg_inserts.insert_autor('Neil deGrasse', 'Tyson');
    pkg_inserts.insert_autor('J.D.', 'Salinger');
    pkg_inserts.insert_autor('Haruki', 'Murakami');

    -- Insertar géneros
    pkg_inserts.insert_genero('Novela', 'Obras de ficción narrativa');
    pkg_inserts.insert_genero('Ciencia Ficción', 'Obras con elementos científicos futuristas');
    pkg_inserts.insert_genero('Fantasía', 'Obras con elementos mágicos o sobrenaturales');
    pkg_inserts.insert_genero('Romance', 'Obras con elementos mágicos o sobrenaturales');
    pkg_inserts.insert_genero('Autoayuda', 'Obras con elementos mágicos o sobrenaturales');
    pkg_inserts.insert_genero('Crimen', 'Obras con elementos mágicos o sobrenaturales');
    pkg_inserts.insert_genero('Misterio', 'Obras con elementos mágicos o sobrenaturales');
    pkg_inserts.insert_genero('Literatura Clásica ', 'Obras con elementos mágicos o sobrenaturales');
    pkg_inserts.insert_genero('Coming-of-age', 'Obras con elementos mágicos o sobrenaturales');
    pkg_inserts.insert_genero('Filosofía', 'Obras con elementos mágicos o sobrenaturales');
    pkg_inserts.insert_genero('Manga', 'Obras con elementos mágicos o sobrenaturales');
    pkg_inserts.insert_genero('Ciencia', 'Obras con elementos mágicos o sobrenaturales');
    
    
    -- Insertar libros con autores y géneros 
    pkg_inserts.insert_libro('El camino de los reyes', '9111466657662', '+15', 8, 1, '1', '3'); -- Brandon Sanderson, Fantasía
    pkg_inserts.insert_libro('El Hobbit', '9112445000666', '+12', 10, 5, '5', '3'); -- J.R.R. Tolkien, Fantasía

    pkg_inserts.insert_libro('Duna', '9113497593794', '+16', 6, 4, '3', '2'); -- Frank Herbert, Ciencia Ficción

    pkg_inserts.insert_libro('Asesinato en el Orient Express', '9114490323042', '+16', 7, 7, '4', '6,7'); -- Agatha Christie, Crimen/Misterio
    pkg_inserts.insert_libro('El sabueso de los Baskerville', '9115467033275', '+14', 5, 8, '4', '7'); -- Agatha Christie, Misterio

    pkg_inserts.insert_libro('Orgullo y prejuicio', '9116491051258', '+14', 6, 10, '6', '8,4'); -- Jane Austen, Literatura Clásica/Romance

    pkg_inserts.insert_libro('1Q84', '9117483833919', '+18', 5, 3, '14', '4'); -- Haruki Murakami, Romance

    pkg_inserts.insert_libro('Los miserables', '9711866332941', '+16', 7, 2, '2', '8,4'); -- Victor Hugo, Literatura Clásica/Romance

    pkg_inserts.insert_libro('Beyond Good and Evil', '9119878448152', '+16', 4, 4, '10', '10'); -- Friederich Nietzche, Filosofía

    pkg_inserts.insert_libro('Atomic Habits', '9223384454287', '+16', 5, 5, '7', '5'); -- James Clear, Autoayuda

    pkg_inserts.insert_libro('El guardián entre el centeno', '9221433927176', '+16', 6, 6, '13', '9'); -- J.D. Salinger, Coming-of-age

    pkg_inserts.insert_libro('One Piece Vol. 1', '9222415618836', '+10', 8, 2, '9', '11'); -- Eiichiro Oda, Manga

    pkg_inserts.insert_libro('El futuro de la Humanidad', '9223415618836', '+10', 8, 11, '11,12', '12'); --Michio Kaku, Neil deGrease Tyson, Ciencia
    
    
    --Insertar reservas
    pkg_inserts.insert_reserva(SYSDATE, SYSDATE+7, 2, '3');
    
    pkg_inserts.insert_reserva(SYSDATE-10, SYSDATE-3, 3, '4,5,6');
    
    pkg_inserts.insert_reserva(SYSDATE-5, SYSDATE+2, 4, '7');
    
    pkg_inserts.insert_reserva(SYSDATE-3, SYSDATE+4, 5, '8,9');
    
    pkg_inserts.insert_reserva(SYSDATE-7, SYSDATE, 6, '10');
    
    pkg_inserts.insert_reserva(SYSDATE-2, SYSDATE+5, 7, '11');
    
    pkg_inserts.insert_reserva(SYSDATE-1, SYSDATE+6, 8, '12');
    
    pkg_inserts.insert_reserva(SYSDATE, SYSDATE+7, 9, '13');
    
    pkg_inserts.insert_reserva(SYSDATE, SYSDATE+7, 10, '1,3');
    
    pkg_inserts.insert_reserva(SYSDATE-4, SYSDATE+3, 1, '2,4');

    pkg_inserts.insert_reserva(SYSDATE-15, SYSDATE-8, 11, '1');         

    pkg_inserts.insert_reserva(SYSDATE-12, SYSDATE-5, 12, '2,3');       

    pkg_inserts.insert_reserva(SYSDATE-9, SYSDATE-2, 13, '4,5,6');      

    pkg_inserts.insert_reserva(SYSDATE-6, SYSDATE+1, 14, '7');          

    pkg_inserts.insert_reserva(SYSDATE-3, SYSDATE+4, 15, '8,9');        

    pkg_inserts.insert_reserva(SYSDATE, SYSDATE+7, 16, '10');           

    pkg_inserts.insert_reserva(SYSDATE-4, SYSDATE+3, 17, '11,12');      

    pkg_inserts.insert_reserva(SYSDATE-7, SYSDATE, 18, '13');           

    pkg_inserts.insert_reserva(SYSDATE-1, SYSDATE+6, 19, '1,2,3');      

    pkg_inserts.insert_reserva(SYSDATE-5, SYSDATE+2, 20, '4,5');   
    
    
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Datos de prueba insertados correctamente');
    EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error al insertar datos de prueba: ' || SQLERRM);
        RAISE;
    END insert_datos_default;
--Clear de datos
    PROCEDURE limpiar_datos_default IS
    BEGIN
    -- Eliminar en orden inverso para respetar las FKs
    DELETE FROM Libro_Reserva;
    DELETE FROM Genero_Libro;
    DELETE FROM Autor_Libro;
    DELETE FROM Bitacora_Reservas;
    DELETE FROM Reservas;
    DELETE FROM Libros;
    DELETE FROM Genero;
    DELETE FROM Autor;
    DELETE FROM Editorial;
    DELETE FROM Usuario;
    
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Todos los datos de prueba eliminados');
    EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error al limpiar datos de prueba: ' || SQLERRM);
        RAISE;
    END limpiar_datos_default;
END pkg_datos_default;
/

